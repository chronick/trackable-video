import React, { Component } from 'react';
import { func } from 'prop-types';

function post(iframe, eventName, origin="*") {
  const data = {
    method: 'addEventListener'
  };

  if (eventName) {
    data.value = eventName;
  }

  iframe.contentWindow.postMessage(JSON.stringify(data), origin);
}

class TrackableVideo extends Component {

  componentDidMount() {
    window.addEventListener('message', this.onMessageReceived.bind(this), false);
  }

  onMessageReceived(e) {
    const data = typeof e.data == 'string' ? JSON.parse(e.data) : e.data;

    console.log(data);

    const {
      onReady,
      onStart,
      onProgress,
      onPause,
      onFinish
    } = this.props;

    switch (data.event) {
      case 'ready':
        return this.onReady();
      case 'play':
        return onStart && onStart(data.data);
      case 'playProgress':
        return onProgress && onProgress(data.data);
      case 'pause':
        return onPause && onPause(data.data);
      case 'finish':
        return onFinish && onFinish(data.data);
      default:
        console.log('no handler for:', data.event);
    }
  }

  onReady() {
    post(this._iframe, 'play');
    post(this._iframe, 'pause');
    post(this._iframe, 'finish');
    post(this._iframe, 'playProgress');
    this.props.onReady && this.props.onReady();
  }

  render() {
    const {
      onReady,
      onStart,
      onPause,
      onProgress,
      onFinish,
      ...iframeProps
    } = this.props;

    return <iframe
      {...iframeProps}
      ref={ (c) => this._iframe = c }
    />
  }
}

TrackableVideo.propTypes = {
  onReady: func,
  onStart: func,
  onPause: func,
  onProgress: func,
  onFinish: func
}

export default TrackableVideo;
